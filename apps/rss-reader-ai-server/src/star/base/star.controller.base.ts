/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StarService } from "../star.service";
import { StarCreateInput } from "./StarCreateInput";
import { Star } from "./Star";
import { StarFindManyArgs } from "./StarFindManyArgs";
import { StarWhereUniqueInput } from "./StarWhereUniqueInput";
import { StarUpdateInput } from "./StarUpdateInput";

export class StarControllerBase {
  constructor(protected readonly service: StarService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Star })
  async createStar(@common.Body() data: StarCreateInput): Promise<Star> {
    return await this.service.createStar({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Star] })
  @ApiNestedQuery(StarFindManyArgs)
  async stars(@common.Req() request: Request): Promise<Star[]> {
    const args = plainToClass(StarFindManyArgs, request.query);
    return this.service.stars({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Star })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async star(
    @common.Param() params: StarWhereUniqueInput
  ): Promise<Star | null> {
    const result = await this.service.star({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Star })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStar(
    @common.Param() params: StarWhereUniqueInput,
    @common.Body() data: StarUpdateInput
  ): Promise<Star | null> {
    try {
      return await this.service.updateStar({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Star })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStar(
    @common.Param() params: StarWhereUniqueInput
  ): Promise<Star | null> {
    try {
      return await this.service.deleteStar({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
