/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StatisticsService } from "../statistics.service";
import { StatisticsCreateInput } from "./StatisticsCreateInput";
import { Statistics } from "./Statistics";
import { StatisticsFindManyArgs } from "./StatisticsFindManyArgs";
import { StatisticsWhereUniqueInput } from "./StatisticsWhereUniqueInput";
import { StatisticsUpdateInput } from "./StatisticsUpdateInput";

export class StatisticsControllerBase {
  constructor(protected readonly service: StatisticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Statistics })
  async createStatistics(
    @common.Body() data: StatisticsCreateInput
  ): Promise<Statistics> {
    return await this.service.createStatistics({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Statistics] })
  @ApiNestedQuery(StatisticsFindManyArgs)
  async statisticsItems(@common.Req() request: Request): Promise<Statistics[]> {
    const args = plainToClass(StatisticsFindManyArgs, request.query);
    return this.service.statisticsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Statistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async statistics(
    @common.Param() params: StatisticsWhereUniqueInput
  ): Promise<Statistics | null> {
    const result = await this.service.statistics({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Statistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStatistics(
    @common.Param() params: StatisticsWhereUniqueInput,
    @common.Body() data: StatisticsUpdateInput
  ): Promise<Statistics | null> {
    try {
      return await this.service.updateStatistics({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Statistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStatistics(
    @common.Param() params: StatisticsWhereUniqueInput
  ): Promise<Statistics | null> {
    try {
      return await this.service.deleteStatistics({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
