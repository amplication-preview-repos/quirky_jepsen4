/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReadHistoryService } from "../readHistory.service";
import { ReadHistoryCreateInput } from "./ReadHistoryCreateInput";
import { ReadHistory } from "./ReadHistory";
import { ReadHistoryFindManyArgs } from "./ReadHistoryFindManyArgs";
import { ReadHistoryWhereUniqueInput } from "./ReadHistoryWhereUniqueInput";
import { ReadHistoryUpdateInput } from "./ReadHistoryUpdateInput";

export class ReadHistoryControllerBase {
  constructor(protected readonly service: ReadHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReadHistory })
  async createReadHistory(
    @common.Body() data: ReadHistoryCreateInput
  ): Promise<ReadHistory> {
    return await this.service.createReadHistory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReadHistory] })
  @ApiNestedQuery(ReadHistoryFindManyArgs)
  async readHistories(@common.Req() request: Request): Promise<ReadHistory[]> {
    const args = plainToClass(ReadHistoryFindManyArgs, request.query);
    return this.service.readHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReadHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async readHistory(
    @common.Param() params: ReadHistoryWhereUniqueInput
  ): Promise<ReadHistory | null> {
    const result = await this.service.readHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReadHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReadHistory(
    @common.Param() params: ReadHistoryWhereUniqueInput,
    @common.Body() data: ReadHistoryUpdateInput
  ): Promise<ReadHistory | null> {
    try {
      return await this.service.updateReadHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReadHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReadHistory(
    @common.Param() params: ReadHistoryWhereUniqueInput
  ): Promise<ReadHistory | null> {
    try {
      return await this.service.deleteReadHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
