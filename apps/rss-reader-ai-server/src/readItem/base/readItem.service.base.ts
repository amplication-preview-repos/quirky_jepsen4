/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReadItem as PrismaReadItem } from "@prisma/client";

export class ReadItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReadItemCountArgs, "select">): Promise<number> {
    return this.prisma.readItem.count(args);
  }

  async readItems(
    args: Prisma.ReadItemFindManyArgs
  ): Promise<PrismaReadItem[]> {
    return this.prisma.readItem.findMany(args);
  }
  async readItem(
    args: Prisma.ReadItemFindUniqueArgs
  ): Promise<PrismaReadItem | null> {
    return this.prisma.readItem.findUnique(args);
  }
  async createReadItem(
    args: Prisma.ReadItemCreateArgs
  ): Promise<PrismaReadItem> {
    return this.prisma.readItem.create(args);
  }
  async updateReadItem(
    args: Prisma.ReadItemUpdateArgs
  ): Promise<PrismaReadItem> {
    return this.prisma.readItem.update(args);
  }
  async deleteReadItem(
    args: Prisma.ReadItemDeleteArgs
  ): Promise<PrismaReadItem> {
    return this.prisma.readItem.delete(args);
  }
}
