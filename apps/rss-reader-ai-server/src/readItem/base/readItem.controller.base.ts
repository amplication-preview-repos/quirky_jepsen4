/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReadItemService } from "../readItem.service";
import { ReadItemCreateInput } from "./ReadItemCreateInput";
import { ReadItem } from "./ReadItem";
import { ReadItemFindManyArgs } from "./ReadItemFindManyArgs";
import { ReadItemWhereUniqueInput } from "./ReadItemWhereUniqueInput";
import { ReadItemUpdateInput } from "./ReadItemUpdateInput";

export class ReadItemControllerBase {
  constructor(protected readonly service: ReadItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReadItem })
  async createReadItem(
    @common.Body() data: ReadItemCreateInput
  ): Promise<ReadItem> {
    return await this.service.createReadItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReadItem] })
  @ApiNestedQuery(ReadItemFindManyArgs)
  async readItems(@common.Req() request: Request): Promise<ReadItem[]> {
    const args = plainToClass(ReadItemFindManyArgs, request.query);
    return this.service.readItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReadItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async readItem(
    @common.Param() params: ReadItemWhereUniqueInput
  ): Promise<ReadItem | null> {
    const result = await this.service.readItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReadItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReadItem(
    @common.Param() params: ReadItemWhereUniqueInput,
    @common.Body() data: ReadItemUpdateInput
  ): Promise<ReadItem | null> {
    try {
      return await this.service.updateReadItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReadItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReadItem(
    @common.Param() params: ReadItemWhereUniqueInput
  ): Promise<ReadItem | null> {
    try {
      return await this.service.deleteReadItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
