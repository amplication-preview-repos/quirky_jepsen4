/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReadLater } from "./ReadLater";
import { ReadLaterCountArgs } from "./ReadLaterCountArgs";
import { ReadLaterFindManyArgs } from "./ReadLaterFindManyArgs";
import { ReadLaterFindUniqueArgs } from "./ReadLaterFindUniqueArgs";
import { DeleteReadLaterArgs } from "./DeleteReadLaterArgs";
import { ReadLaterService } from "../readLater.service";
@graphql.Resolver(() => ReadLater)
export class ReadLaterResolverBase {
  constructor(protected readonly service: ReadLaterService) {}

  async _readLatersMeta(
    @graphql.Args() args: ReadLaterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReadLater])
  async readLaters(
    @graphql.Args() args: ReadLaterFindManyArgs
  ): Promise<ReadLater[]> {
    return this.service.readLaters(args);
  }

  @graphql.Query(() => ReadLater, { nullable: true })
  async readLater(
    @graphql.Args() args: ReadLaterFindUniqueArgs
  ): Promise<ReadLater | null> {
    const result = await this.service.readLater(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReadLater)
  async deleteReadLater(
    @graphql.Args() args: DeleteReadLaterArgs
  ): Promise<ReadLater | null> {
    try {
      return await this.service.deleteReadLater(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
