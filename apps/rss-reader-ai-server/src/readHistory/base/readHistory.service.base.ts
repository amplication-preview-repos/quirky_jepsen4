/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReadHistory as PrismaReadHistory } from "@prisma/client";

export class ReadHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReadHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.readHistory.count(args);
  }

  async readHistories(
    args: Prisma.ReadHistoryFindManyArgs
  ): Promise<PrismaReadHistory[]> {
    return this.prisma.readHistory.findMany(args);
  }
  async readHistory(
    args: Prisma.ReadHistoryFindUniqueArgs
  ): Promise<PrismaReadHistory | null> {
    return this.prisma.readHistory.findUnique(args);
  }
  async createReadHistory(
    args: Prisma.ReadHistoryCreateArgs
  ): Promise<PrismaReadHistory> {
    return this.prisma.readHistory.create(args);
  }
  async updateReadHistory(
    args: Prisma.ReadHistoryUpdateArgs
  ): Promise<PrismaReadHistory> {
    return this.prisma.readHistory.update(args);
  }
  async deleteReadHistory(
    args: Prisma.ReadHistoryDeleteArgs
  ): Promise<PrismaReadHistory> {
    return this.prisma.readHistory.delete(args);
  }
}
