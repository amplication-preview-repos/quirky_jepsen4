/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReadLaterService } from "../readLater.service";
import { ReadLaterCreateInput } from "./ReadLaterCreateInput";
import { ReadLater } from "./ReadLater";
import { ReadLaterFindManyArgs } from "./ReadLaterFindManyArgs";
import { ReadLaterWhereUniqueInput } from "./ReadLaterWhereUniqueInput";
import { ReadLaterUpdateInput } from "./ReadLaterUpdateInput";

export class ReadLaterControllerBase {
  constructor(protected readonly service: ReadLaterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReadLater })
  async createReadLater(
    @common.Body() data: ReadLaterCreateInput
  ): Promise<ReadLater> {
    return await this.service.createReadLater({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReadLater] })
  @ApiNestedQuery(ReadLaterFindManyArgs)
  async readLaters(@common.Req() request: Request): Promise<ReadLater[]> {
    const args = plainToClass(ReadLaterFindManyArgs, request.query);
    return this.service.readLaters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReadLater })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async readLater(
    @common.Param() params: ReadLaterWhereUniqueInput
  ): Promise<ReadLater | null> {
    const result = await this.service.readLater({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReadLater })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReadLater(
    @common.Param() params: ReadLaterWhereUniqueInput,
    @common.Body() data: ReadLaterUpdateInput
  ): Promise<ReadLater | null> {
    try {
      return await this.service.updateReadLater({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReadLater })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReadLater(
    @common.Param() params: ReadLaterWhereUniqueInput
  ): Promise<ReadLater | null> {
    try {
      return await this.service.deleteReadLater({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
